{"remainingRequest":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuce/ailin-web/frontend/src/components/DebugPanel.vue?vue&type=style&index=0&id=70a87921&scoped=true&lang=css","dependencies":[{"path":"/Users/liuce/ailin-web/frontend/src/components/DebugPanel.vue","mtime":1755363951971},{"path":"/Users/liuce/ailin-web/frontend/node_modules/css-loader/dist/cjs.js","mtime":1755361481445},{"path":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1755361481927},{"path":"/Users/liuce/ailin-web/frontend/node_modules/postcss-loader/src/index.js","mtime":1755361481585},{"path":"/Users/liuce/ailin-web/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1755361481208},{"path":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/index.js","mtime":1755361481658}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5kZWJ1Zy1wYW5lbCB7CiAgcG9zaXRpb246IGZpeGVkOwogIHRvcDogNzBweDsKICByaWdodDogMTBweDsKICB3aWR0aDogMzUwcHg7CiAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAtIDgwcHgpOwogIGJhY2tncm91bmQ6IHdoaXRlOwogIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIGJveC1zaGFkb3c6IDAgNHB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjE1KTsKICB6LWluZGV4OiAxMDAwOwogIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5kZWJ1Zy1oZWFkZXIgewogIHBhZGRpbmc6IDEycHggMTZweDsKICBiYWNrZ3JvdW5kOiAjZjVmNWY1OwogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgZm9udC13ZWlnaHQ6IDYwMDsKfQoKLmRlYnVnLWNvbnRlbnQgewogIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxNDBweCk7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBwYWRkaW5nOiAxNnB4Owp9CgouZGVidWctc2VjdGlvbiB7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQoKLmRlYnVnLXNlY3Rpb24gaDQgewogIG1hcmdpbjogMCAwIDEwcHggMDsKICBmb250LXNpemU6IDE0cHg7CiAgY29sb3I6ICMzMzM7Cn0KCi5zdGF0dXMtaXRlbSB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgbWFyZ2luLWJvdHRvbTogNnB4OwogIGZvbnQtc2l6ZTogMTJweDsKfQoKLmxhYmVsIHsKICBjb2xvcjogIzY2NjsKICBmb250LXdlaWdodDogNTAwOwp9CgoudmFsdWUgewogIGNvbG9yOiAjMzMzOwogIGZvbnQtZmFtaWx5OiAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7Cn0KCi5zdGF0dXMuY29ubmVjdGVkIHsKICBjb2xvcjogIzUyYzQxYTsKfQoKLnN0YXR1cy5kaXNjb25uZWN0ZWQgewogIGNvbG9yOiAjZjUyMjJkOwp9CgoudGVzdC1idXR0b25zIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjsKICBnYXA6IDhweDsKfQoKLmxvZy1jb250YWluZXIgewogIG1heC1oZWlnaHQ6IDE1MHB4OwogIG92ZXJmbG93LXk6IGF1dG87CiAgYmFja2dyb3VuZDogI2Y4ZjhmODsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgcGFkZGluZzogOHB4Owp9CgoubG9nLWl0ZW0gewogIGZvbnQtc2l6ZTogMTFweDsKICBtYXJnaW4tYm90dG9tOiA0cHg7CiAgZGlzcGxheTogZmxleDsKICBnYXA6IDhweDsKfQoKLmxvZy10aW1lIHsKICBjb2xvcjogIzk5OTsKICBtaW4td2lkdGg6IDYwcHg7Cn0KCi5sb2ctbWVzc2FnZSB7CiAgY29sb3I6ICMzMzM7CiAgd29yZC1icmVhazogYnJlYWstYWxsOwp9CgoubG9nLWl0ZW0uZXJyb3IgLmxvZy1tZXNzYWdlIHsKICBjb2xvcjogI2Y1MjIyZDsKfQoKLmxvZy1pdGVtLndhcm4gLmxvZy1tZXNzYWdlIHsKICBjb2xvcjogI2ZhYWQxNDsKfQoKLmRlYnVnLXRvZ2dsZSB7CiAgcG9zaXRpb246IGZpeGVkOwogIHRvcDogNzBweDsKICByaWdodDogMTBweDsKICB3aWR0aDogNDBweDsKICBoZWlnaHQ6IDQwcHg7CiAgYmFja2dyb3VuZDogIzE4OTBmZjsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICBjdXJzb3I6IHBvaW50ZXI7CiAgZm9udC1zaXplOiAxNnB4OwogIHotaW5kZXg6IDk5OTsKICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE1KTsKfQoKLmRlYnVnLXRvZ2dsZTpob3ZlciB7CiAgYmFja2dyb3VuZDogIzQwYTlmZjsKfQo="},{"version":3,"sources":["DebugPanel.vue"],"names":[],"mappings":";AAufile":"DebugPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"debug-panel\" v-if=\"showDebug\">\n    <div class=\"debug-header\">\n      <span>🐛 调试面板</span>\n      <el-button type=\"text\" size=\"mini\" @click=\"toggleDebug\">\n        {{ showDebug ? '隐藏' : '显示' }}\n      </el-button>\n    </div>\n    \n    <div class=\"debug-content\">\n      <div class=\"debug-section\">\n        <h4>📡 WebSocket状态</h4>\n        <div class=\"status-item\">\n          <span class=\"label\">连接状态:</span>\n          <span :class=\"['status', wsConnected ? 'connected' : 'disconnected']\">\n            {{ wsConnected ? '✅ 已连接' : '❌ 未连接' }}\n          </span>\n        </div>\n        <div class=\"status-item\">\n          <span class=\"label\">WebSocket URL:</span>\n          <span class=\"value\">{{ wsUrl }}</span>\n        </div>\n        <div class=\"status-item\">\n          <span class=\"label\">收到消息数:</span>\n          <span class=\"value\">{{ messageCount }}</span>\n        </div>\n        <div class=\"status-item\">\n          <span class=\"label\">最后消息:</span>\n          <span class=\"value\">{{ lastMessage || '无' }}</span>\n        </div>\n      </div>\n      \n      <div class=\"debug-section\">\n        <h4>📱 设备状态</h4>\n        <div class=\"status-item\">\n          <span class=\"label\">设备总数:</span>\n          <span class=\"value\">{{ deviceCount }}</span>\n        </div>\n        <div class=\"status-item\">\n          <span class=\"label\">在线设备:</span>\n          <span class=\"value\">{{ onlineDeviceCount }}</span>\n        </div>\n        <div class=\"status-item\">\n          <span class=\"label\">扫描状态:</span>\n          <span class=\"value\">{{ isScanning ? '🔍 扫描中' : '⏸️ 空闲' }}</span>\n        </div>\n      </div>\n      \n      <div class=\"debug-section\">\n        <h4>🔧 测试功能</h4>\n        <div class=\"test-buttons\">\n          <el-button size=\"mini\" @click=\"testWebSocket\">测试WebSocket</el-button>\n          <el-button size=\"mini\" @click=\"testBackendAPI\">测试后端API</el-button>\n          <el-button size=\"mini\" @click=\"reconnectWebSocket\">重连WebSocket</el-button>\n          <el-button size=\"mini\" @click=\"clearLogs\">清除日志</el-button>\n        </div>\n      </div>\n      \n      <div class=\"debug-section\">\n        <h4>📝 控制台日志 (最近10条)</h4>\n        <div class=\"log-container\">\n          <div \n            v-for=\"(log, index) in recentLogs\" \n            :key=\"index\"\n            :class=\"['log-item', log.type]\"\n          >\n            <span class=\"log-time\">{{ log.time }}</span>\n            <span class=\"log-message\">{{ log.message }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"debug-toggle\" @click=\"showDebug = !showDebug\">\n    🐛\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters } from 'vuex'\nimport { mobileApi } from '@/services/api'\n\nexport default {\n  name: 'DebugPanel',\n  \n  data() {\n    return {\n      showDebug: false,\n      messageCount: 0,\n      lastMessage: '',\n      recentLogs: [],\n      originalConsole: {}\n    }\n  },\n  \n  computed: {\n    ...mapState(['wsConnected', 'isScanning']),\n    ...mapGetters(['deviceCount', 'onlineDeviceCount']),\n    \n    wsUrl() {\n      return `${this.$WS_BASE}/ws/screen`\n    }\n  },\n  \n  mounted() {\n    this.interceptConsole()\n    this.listenToWebSocketMessages()\n  },\n  \n  beforeDestroy() {\n    this.restoreConsole()\n  },\n  \n  methods: {\n    toggleDebug() {\n      this.showDebug = !this.showDebug\n    },\n    \n    // 拦截控制台输出\n    interceptConsole() {\n      this.originalConsole.log = console.log\n      this.originalConsole.error = console.error\n      this.originalConsole.warn = console.warn\n      \n      const addLog = (type, message) => {\n        this.recentLogs.unshift({\n          type,\n          time: new Date().toLocaleTimeString(),\n          message: String(message)\n        })\n        \n        // 只保留最近10条\n        if (this.recentLogs.length > 10) {\n          this.recentLogs = this.recentLogs.slice(0, 10)\n        }\n      }\n      \n      console.log = (...args) => {\n        this.originalConsole.log(...args)\n        addLog('log', args.join(' '))\n      }\n      \n      console.error = (...args) => {\n        this.originalConsole.error(...args)\n        addLog('error', args.join(' '))\n      }\n      \n      console.warn = (...args) => {\n        this.originalConsole.warn(...args)\n        addLog('warn', args.join(' '))\n      }\n    },\n    \n    // 恢复控制台\n    restoreConsole() {\n      console.log = this.originalConsole.log\n      console.error = this.originalConsole.error\n      console.warn = this.originalConsole.warn\n    },\n    \n    // 监听WebSocket消息\n    listenToWebSocketMessages() {\n      window.addEventListener('screenFrame', (event) => {\n        this.messageCount++\n        this.lastMessage = `设备${event.detail.deviceId}的屏幕帧`\n      })\n    },\n    \n    // 测试WebSocket\n    testWebSocket() {\n      if (this.$ws && this.$ws.readyState === WebSocket.OPEN) {\n        this.$ws.send(JSON.stringify({\n          type: 'test',\n          message: 'WebSocket测试消息',\n          timestamp: Date.now()\n        }))\n        this.$message.success('WebSocket测试消息已发送')\n      } else {\n        this.$message.error('WebSocket未连接')\n      }\n    },\n    \n    // 测试后端API\n    async testBackendAPI() {\n      try {\n        console.log('🧪 测试后端API连接...')\n        const result = await mobileApi.getSystemStatus()\n        console.log('✅ 后端API测试成功:', result)\n        this.$message.success('后端API连接正常')\n      } catch (error) {\n        console.error('❌ 后端API测试失败:', error)\n        this.$message.error('后端API连接失败: ' + error.message)\n      }\n    },\n    \n    // 重连WebSocket\n    reconnectWebSocket() {\n      console.log('🔄 手动重连WebSocket...')\n      this.$store.dispatch('connectWebSocket')\n      this.$message.info('正在重连WebSocket...')\n    },\n    \n    // 清除日志\n    clearLogs() {\n      this.recentLogs = []\n      this.messageCount = 0\n      this.lastMessage = ''\n      this.$message.success('日志已清除')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.debug-panel {\n  position: fixed;\n  top: 70px;\n  right: 10px;\n  width: 350px;\n  max-height: calc(100vh - 80px);\n  background: white;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1000;\n  overflow: hidden;\n}\n\n.debug-header {\n  padding: 12px 16px;\n  background: #f5f5f5;\n  border-bottom: 1px solid #ddd;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 600;\n}\n\n.debug-content {\n  max-height: calc(100vh - 140px);\n  overflow-y: auto;\n  padding: 16px;\n}\n\n.debug-section {\n  margin-bottom: 20px;\n}\n\n.debug-section h4 {\n  margin: 0 0 10px 0;\n  font-size: 14px;\n  color: #333;\n}\n\n.status-item {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 6px;\n  font-size: 12px;\n}\n\n.label {\n  color: #666;\n  font-weight: 500;\n}\n\n.value {\n  color: #333;\n  font-family: 'Courier New', monospace;\n}\n\n.status.connected {\n  color: #52c41a;\n}\n\n.status.disconnected {\n  color: #f5222d;\n}\n\n.test-buttons {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 8px;\n}\n\n.log-container {\n  max-height: 150px;\n  overflow-y: auto;\n  background: #f8f8f8;\n  border-radius: 4px;\n  padding: 8px;\n}\n\n.log-item {\n  font-size: 11px;\n  margin-bottom: 4px;\n  display: flex;\n  gap: 8px;\n}\n\n.log-time {\n  color: #999;\n  min-width: 60px;\n}\n\n.log-message {\n  color: #333;\n  word-break: break-all;\n}\n\n.log-item.error .log-message {\n  color: #f5222d;\n}\n\n.log-item.warn .log-message {\n  color: #faad14;\n}\n\n.debug-toggle {\n  position: fixed;\n  top: 70px;\n  right: 10px;\n  width: 40px;\n  height: 40px;\n  background: #1890ff;\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 16px;\n  z-index: 999;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n}\n\n.debug-toggle:hover {\n  background: #40a9ff;\n}\n</style>"]}]}