{"remainingRequest":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuce/ailin-web/frontend/src/components/ScreenWindow.vue?vue&type=style&index=0&id=03b6fdac&scoped=true&lang=css","dependencies":[{"path":"/Users/liuce/ailin-web/frontend/src/components/ScreenWindow.vue","mtime":1755396753253},{"path":"/Users/liuce/ailin-web/frontend/node_modules/css-loader/dist/cjs.js","mtime":1755361481445},{"path":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1755361481927},{"path":"/Users/liuce/ailin-web/frontend/node_modules/postcss-loader/src/index.js","mtime":1755361481585},{"path":"/Users/liuce/ailin-web/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1755361481208},{"path":"/Users/liuce/ailin-web/frontend/node_modules/vue-loader/lib/index.js","mtime":1755361481658}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zY3JlZW4td2luZG93IHsKICBiYWNrZ3JvdW5kOiAjMDAwOwogIGJvcmRlci1yYWRpdXM6IDZweDsKICBvdmVyZmxvdzogaGlkZGVuOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBjdXJzb3I6IHBvaW50ZXI7CiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTsKICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDsKfQoKLnNjcmVlbi13aW5kb3c6aG92ZXIgewogIHRyYW5zZm9ybTogc2NhbGUoMS4wMik7CiAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMik7Cn0KCi5zY3JlZW4td2luZG93Lm9ubGluZSB7CiAgYm9yZGVyLWNvbG9yOiAjNTJjNDFhOwp9Cgouc2NyZWVuLXdpbmRvdy5vZmZsaW5lIHsKICBib3JkZXItY29sb3I6ICNmNTIyMmQ7CiAgYmFja2dyb3VuZDogIzFhMWExYTsKfQoKLnNjcmVlbi13aW5kb3cuaGFzLWZyYW1lIHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKfQoKLyog56qX5Y+j5aS06YOoICovCi53aW5kb3ctaGVhZGVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIGxlZnQ6IDA7CiAgcmlnaHQ6IDA7CiAgaGVpZ2h0OiAyOHB4OwogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogIGNvbG9yOiB3aGl0ZTsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgcGFkZGluZzogMCA4cHg7CiAgei1pbmRleDogMTA7CiAgZm9udC1zaXplOiAxMnB4Owp9Cgoud2luZG93LW51bWJlciB7CiAgYmFja2dyb3VuZDogIzE4OTBmZjsKICBjb2xvcjogd2hpdGU7CiAgcGFkZGluZzogMnB4IDZweDsKICBib3JkZXItcmFkaXVzOiAzcHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBmb250LWZhbWlseTogJ0NvdXJpZXIgTmV3JywgbW9ub3NwYWNlOwogIG1hcmdpbi1yaWdodDogOHB4OwogIG1pbi13aWR0aDogMjRweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgZm9udC1zaXplOiAxMXB4Owp9CgovKiDnp7vpmaTnirbmgIHmloflrZfmoLflvI8gKi8KCi53aW5kb3ctYWN0aW9ucyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGdhcDogNnB4Owp9CgovKiDnp7vpmaRmcHPmoLflvI8gKi8KCi8qIOWxj+W5leaYvuekuuWMuuWfnyAqLwouc2NyZWVuLWRpc3BsYXkgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5zY3JlZW4tY2FudmFzIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAgb2JqZWN0LWZpdDogY29udGFpbjsKICBiYWNrZ3JvdW5kOiAjMDAwOwogIG1heC1oZWlnaHQ6IDE4MCU7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi8qIOmAhuaXtumSiOaXi+i9rDkw5bqmICovCi5zY3JlZW4tY2FudmFzLnJvdGF0ZWQgewogIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7CiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsKICB3aWR0aDogYXV0bzsKICBoZWlnaHQ6IGF1dG87CiAgbWF4LXdpZHRoOiAxMDAlOwogIG1heC1oZWlnaHQ6IDE4MCU7Cn0KCi8qIOWNoOS9jeespiAqLwouc2NyZWVuLXBsYWNlaG9sZGVyIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGNvbG9yOiAjNjY2OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLnBsYWNlaG9sZGVyLWxvYWRpbmcsCi5wbGFjZWhvbGRlci1vZmZsaW5lIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBnYXA6IDhweDsKfQoKLnBsYWNlaG9sZGVyLWxvYWRpbmcgaSB7CiAgZm9udC1zaXplOiAyMHB4OwogIGNvbG9yOiAjMTg5MGZmOwp9CgoucGxhY2Vob2xkZXItb2ZmbGluZSBpIHsKICBmb250LXNpemU6IDIwcHg7CiAgY29sb3I6ICNmNTIyMmQ7Cn0KCi5wbGFjZWhvbGRlci1sb2FkaW5nIGRpdiwKLnBsYWNlaG9sZGVyLW9mZmxpbmUgZGl2IHsKICBmb250LXNpemU6IDExcHg7CiAgY29sb3I6ICM5OTk7Cn0KCi8qIOimhuebluS/oeaBryAqLwouc2NyZWVuLW92ZXJsYXkgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDA7CiAgbGVmdDogMDsKICByaWdodDogMDsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodHJhbnNwYXJlbnQsIHJnYmEoMCwgMCwgMCwgMC43KSk7CiAgY29sb3I6IHdoaXRlOwogIHBhZGRpbmc6IDIwcHggOHB4IDZweCA4cHg7CiAgb3BhY2l0eTogMDsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZTsKfQoKLnNjcmVlbi13aW5kb3c6aG92ZXIgLnNjcmVlbi1vdmVybGF5IHsKICBvcGFjaXR5OiAxOwp9Cgoub3ZlcmxheS1pbmZvIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi5kZXZpY2UtaXAgewogIGZvbnQtc2l6ZTogMTBweDsKICBmb250LWZhbWlseTogJ0NvdXJpZXIgTmV3JywgbW9ub3NwYWNlOwogIG1hcmdpbi1ib3R0b206IDJweDsKfQoKLmxhc3QtdXBkYXRlIHsKICBmb250LXNpemU6IDlweDsKICBjb2xvcjogI2NjYzsKfQoKLyog5ZON5bqU5byP6LCD5pW0ICovCkBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHsKICAud2luZG93LWhlYWRlciB7CiAgICBoZWlnaHQ6IDI0cHg7CiAgICBmb250LXNpemU6IDExcHg7CiAgfQogIAogIC53aW5kb3ctbnVtYmVyIHsKICAgIGZvbnQtc2l6ZTogMTBweDsKICAgIHBhZGRpbmc6IDFweCA0cHg7CiAgfQogIAogIC5mcmFtZS1yYXRlIHsKICAgIGZvbnQtc2l6ZTogOXB4OwogIH0KfQo="},{"version":3,"sources":["ScreenWindow.vue"],"names":[],"mappings":";AAofile":"ScreenWindow.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div \n    class=\"screen-window\"\n    :style=\"containerStyle\"\n    :class=\"{ \n      'online': device.connected,\n      'offline': !device.connected,\n      'has-frame': hasFrame\n    }\"\n    @click=\"handleClick\"\n  >\n    <!-- 窗口头部 -->\n    <div class=\"window-header\">\n      <span class=\"window-number\">{{ String(device.id).padStart(2, '0') }}</span>\n    </div>\n    \n    <!-- 屏幕显示区域 -->\n    <div class=\"screen-display\">\n      <!-- Canvas画布 -->\n      <canvas\n        v-show=\"hasFrame\"\n        ref=\"screenCanvas\"\n        class=\"screen-canvas rotated\"\n      ></canvas>\n      \n      <!-- 占位符 -->\n      <div v-show=\"!hasFrame\" class=\"screen-placeholder\">\n        <div v-if=\"device.connected\" class=\"placeholder-loading\">\n          <i class=\"el-icon-loading\"></i>\n          <div>等待画面</div>\n        </div>\n        <div v-else class=\"placeholder-offline\">\n          <i class=\"el-icon-warning-outline\"></i>\n          <div>设备离线</div>\n        </div>\n      </div>\n      \n      <!-- 覆盖信息 -->\n      <div class=\"screen-overlay\">\n        <div class=\"overlay-info\">\n          <div class=\"device-ip\">{{ device.ip }}</div>\n          <div class=\"last-update\" v-if=\"device.lastUpdate\">\n            {{ lastUpdateText }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ScreenWindow',\n  \n  props: {\n    device: {\n      type: Object,\n      required: true\n    }\n  },\n  \n  data() {\n    return {\n      hasFrame: false,\n      frameCount: 0,\n      frameRate: 0,\n      lastFrameTime: 0,\n      frameRateTimer: null,\n      imgNaturalWidth: 0,\n      imgNaturalHeight: 0\n    }\n  },\n  \n  watch: {\n    // 监听设备连接状态变化\n    'device.connected'(newVal) {\n      if (!newVal) {\n        // 设备断开连接时，重置画面状态\n        this.hasFrame = false\n      }\n    }\n  },\n  \n  computed: {\n    // 容器尺寸：跟图片实际尺寸一样宽高\n    containerStyle() {\n      // 使用图片的实际尺寸作为容器尺寸，因为图片旋转了-90°，所以容器用旋转后的尺寸\n      if (this.imgNaturalWidth && this.imgNaturalHeight) {\n        // 图片旋转-90°后，宽高互换\n        return {\n          width: `${this.imgNaturalHeight}px`,\n          height: `${this.imgNaturalWidth}px`,\n          aspectRatio: 'auto'\n        }\n      }\n      // 如果有设备尺寸信息，优先使用\n      if (this.device.screenWidth && this.device.screenHeight) {\n        // 图片旋转-90°后，宽高互换\n        return {\n          width: `${this.device.screenHeight}px`, \n          height: `${this.device.screenWidth}px`,\n          aspectRatio: 'auto'\n        }\n      }\n      // 默认尺寸\n      return { aspectRatio: '9 / 16' }\n    },\n    statusClass() {\n      if (this.device.connected) {\n        return 'status-online'\n      } else if (this.device.status === 'connecting') {\n        return 'status-connecting'\n      } else {\n        return 'status-offline'\n      }\n    },\n    \n    statusText() {\n      if (this.device.connected) {\n        return '在线'\n      } else if (this.device.status === 'connecting') {\n        return '连接中'\n      } else {\n        return '离线'\n      }\n    },\n    \n    lastUpdateText() {\n      if (!this.device.lastUpdate) {\n        return ''\n      }\n      \n      const now = Date.now()\n      const diff = now - this.device.lastUpdate\n      \n      if (diff < 1000) {\n        return '刚刚'\n      } else if (diff < 60000) {\n        return `${Math.floor(diff / 1000)}s前`\n      } else if (diff < 3600000) {\n        return `${Math.floor(diff / 60000)}m前`\n      } else {\n        return new Date(this.device.lastUpdate).toLocaleTimeString()\n      }\n    }\n  },\n  \n  mounted() {\n    this.initFrameListener()\n    this.startFrameRateCalculation()\n    // 初始化canvas\n    this.$nextTick(() => {\n      if (this.$refs.screenCanvas) {\n        const canvas = this.$refs.screenCanvas\n        // 设置默认尺寸，避免显示异常\n        canvas.width = 100\n        canvas.height = 100\n      }\n    })\n  },\n  \n  beforeDestroy() {\n    this.removeFrameListener()\n    this.stopFrameRateCalculation()\n  },\n  \n  methods: {\n    // 初始化帧监听器\n    initFrameListener() {\n      this.handleScreenFrame = (event) => {\n        const { deviceId, image, timestamp } = event.detail\n        if (deviceId === this.device.id) {\n          this.updateFrame(image, timestamp)\n        }\n      }\n      \n      window.addEventListener('screenFrame', this.handleScreenFrame)\n    },\n    \n    // 移除帧监听器\n    removeFrameListener() {\n      if (this.handleScreenFrame) {\n        window.removeEventListener('screenFrame', this.handleScreenFrame)\n      }\n    },\n    \n    // 更新帧数据\n    updateFrame(image, timestamp) {\n      this.drawImageToCanvas(image)\n      this.frameCount++\n      \n      // 计算帧率\n      const now = Date.now()\n      if (this.lastFrameTime > 0) {\n        const timeDiff = now - this.lastFrameTime\n        if (timeDiff > 0) {\n          const instantFps = 1000 / timeDiff\n          this.frameRate = Math.round(instantFps * 10) / 10\n        }\n      }\n      this.lastFrameTime = now\n    },\n\n    // 使用Canvas绘制图片\n    drawImageToCanvas(dataUrl) {\n      if (!this.$refs.screenCanvas) return\n      \n      const canvas = this.$refs.screenCanvas\n      const ctx = canvas.getContext('2d')\n      \n      try {\n        // 提取base64数据部分\n        const base64Data = dataUrl.replace(/^data:image\\/jpeg;base64,/, '')\n        \n        // 将base64转换为二进制数据\n        const binaryString = atob(base64Data)\n        const bytes = new Uint8Array(binaryString.length)\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i)\n        }\n        \n        // 创建Blob对象\n        const blob = new Blob([bytes], { type: 'image/jpeg' })\n        \n        // 使用createImageBitmap API（避免网络面板显示）\n        createImageBitmap(blob).then(imageBitmap => {\n          // 更新图片尺寸信息（用于容器尺寸计算）\n          this.imgNaturalWidth = imageBitmap.width\n          this.imgNaturalHeight = imageBitmap.height\n          \n          // 设置canvas内部分辨率为图片原始尺寸\n          canvas.width = imageBitmap.width\n          canvas.height = imageBitmap.height\n          \n          // 清除canvas\n          ctx.clearRect(0, 0, canvas.width, canvas.height)\n          \n          // 绘制图片\n          ctx.drawImage(imageBitmap, 0, 0)\n          \n          // 清理ImageBitmap资源\n          imageBitmap.close()\n          \n          // 设置有画面标志\n          if (!this.hasFrame) {\n            this.hasFrame = true\n          }\n        }).catch(error => {\n          console.error(`设备 ${this.device.id} Canvas图片处理失败:`, error)\n          this.hasFrame = false\n        })\n        \n      } catch (error) {\n        console.error(`设备 ${this.device.id} base64解码失败:`, error)\n        this.hasFrame = false\n      }\n    },\n    \n    // 开始帧率计算\n    startFrameRateCalculation() {\n      this.frameRateTimer = setInterval(() => {\n        // 如果超过2秒没有新帧，重置帧率和画面状态\n        const now = Date.now()\n        if (now - this.lastFrameTime > 2000) {\n          this.frameRate = 0\n          // 长时间没有新帧时，重置画面状态\n          if (this.hasFrame && (now - this.lastFrameTime > 5000)) {\n            this.hasFrame = false\n          }\n        }\n      }, 1000)\n    },\n    \n    // 停止帧率计算\n    stopFrameRateCalculation() {\n      if (this.frameRateTimer) {\n        clearInterval(this.frameRateTimer)\n        this.frameRateTimer = null\n      }\n    },\n    \n\n    \n    // 点击窗口\n    handleClick() {\n      this.$emit('select', this.device)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.screen-window {\n  background: #000;\n  border-radius: 6px;\n  overflow: hidden;\n  position: relative;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border: 2px solid transparent;\n}\n\n.screen-window:hover {\n  transform: scale(1.02);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.screen-window.online {\n  border-color: #52c41a;\n}\n\n.screen-window.offline {\n  border-color: #f5222d;\n  background: #1a1a1a;\n}\n\n.screen-window.has-frame {\n  background: transparent;\n}\n\n/* 窗口头部 */\n.window-header {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 28px;\n  background: transparent;\n  color: white;\n  display: flex;\n  align-items: center;\n  padding: 0 8px;\n  z-index: 10;\n  font-size: 12px;\n}\n\n.window-number {\n  background: #1890ff;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-weight: 600;\n  font-family: 'Courier New', monospace;\n  margin-right: 8px;\n  min-width: 24px;\n  text-align: center;\n  font-size: 11px;\n}\n\n/* 移除状态文字样式 */\n\n.window-actions {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n/* 移除fps样式 */\n\n/* 屏幕显示区域 */\n.screen-display {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n.screen-canvas {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  background: #000;\n  max-height: 180%;\n  display: block;\n}\n\n/* 逆时针旋转90度 */\n.screen-canvas.rotated {\n  transform: rotate(-90deg);\n  transform-origin: center center;\n  width: auto;\n  height: auto;\n  max-width: 100%;\n  max-height: 180%;\n}\n\n/* 占位符 */\n.screen-placeholder {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #666;\n  text-align: center;\n}\n\n.placeholder-loading,\n.placeholder-offline {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n}\n\n.placeholder-loading i {\n  font-size: 20px;\n  color: #1890ff;\n}\n\n.placeholder-offline i {\n  font-size: 20px;\n  color: #f5222d;\n}\n\n.placeholder-loading div,\n.placeholder-offline div {\n  font-size: 11px;\n  color: #999;\n}\n\n/* 覆盖信息 */\n.screen-overlay {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));\n  color: white;\n  padding: 20px 8px 6px 8px;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.screen-window:hover .screen-overlay {\n  opacity: 1;\n}\n\n.overlay-info {\n  text-align: center;\n}\n\n.device-ip {\n  font-size: 10px;\n  font-family: 'Courier New', monospace;\n  margin-bottom: 2px;\n}\n\n.last-update {\n  font-size: 9px;\n  color: #ccc;\n}\n\n/* 响应式调整 */\n@media (max-width: 1200px) {\n  .window-header {\n    height: 24px;\n    font-size: 11px;\n  }\n  \n  .window-number {\n    font-size: 10px;\n    padding: 1px 4px;\n  }\n  \n  .frame-rate {\n    font-size: 9px;\n  }\n}\n</style>"]}]}